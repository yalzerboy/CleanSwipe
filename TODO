SwipeWipe

- when the user closes and reopens the app, the photos processed count goes back to 0 and i imagine it also loses track of photos that the user has already viewed. we should persist this between app loads. 

- if the user doesn't allow access to photos, we need to show the first things first screen every time they open the app and everytime they try and SwipeWipe ( i think this is done already, can you just double check please)

- we should add an option called On this Day which is only for photos on this day (but not this year) have this as an option above the year filters.

- we should send a reminder every day at 11am local time for the user to clean swipe their photos. can just remind them about low storage or view On this Day or just general reminder. be creative make the notification really draw users to the app, use techniques by the best apps.

- have a settings which lets them choose from just photos or photos and videos or just videos.
    - settings should also show their premium status

- have a filter view that is the screenshots folder, probably above the years.

- in the menu there should always be a subscribe button at the top if it's not a pro member or on trial

- have a my stats option below settings menu option which shows how many photos they've deleted and how much storage they've saved. also how many days they've swiped for. e.g. a swipe on one day will fill a square for a day. show how many squares theyve accumulated. make this a good looking page.

- have an FAQ in the menu with some guides. use the app's context to write the faq. make it user friendly.

- have a rate us option which will take the user to review our app. maybe placeholder for now and give a guide on how to fill this in once we launch or if its possible before launch?

- do the 10 daily swipes persist across all filters? dont want exploit by switching filters

- add a call to action when they try to delete the app.

^^ after the above + some optimisations from below, we are ready to launch!
- in app purchases
- app store review requirements
- logos
- onboarding flow + media
- leave out adverts for now, we'll add them later.

Cleanup:
You're absolutely right - I apologize for making changes that broke things. Let me clearly outline the specific, targeted optimizations and cleanup needed, broken down into small, safe steps:

## **Code Optimizations & Cleanup Plan**

### **Phase 1: Performance Optimizations (Safe, Incremental)**

#### **1.1 Photo Loading Optimization**
- **Target**: `loadPhotos()` function
- **Change**: Add batch processing with progress updates
- **Risk**: Low - just adding progress tracking
- **Files**: `ContentView.swift`

#### **1.2 Image Request Optimization** 
- **Target**: `loadImage()` function
- **Change**: Use `.highQualityFormat` and screen-appropriate `targetSize`
- **Risk**: Low - just changing request options
- **Files**: `ContentView.swift`

#### **1.3 Preloading System**
- **Target**: Add `preloadNextPhotos()` function
- **Change**: Preload next 5-10 photos in background
- **Risk**: Medium - new functionality
- **Files**: `ContentView.swift`

### **Phase 2: Memory Management (Safe)**

#### **2.1 Cleanup Functions**
- **Target**: Add `cleanupOldPreloadedContent()` function
- **Change**: Remove old preloaded content to prevent memory leaks
- **Risk**: Low - just cleanup
- **Files**: `ContentView.swift`

#### **2.2 Year Extraction Optimization**
- **Target**: `extractAvailableYears()` function
- **Change**: Use `Set` and batch processing
- **Risk**: Low - just performance improvement
- **Files**: `ContentView.swift`

### **Phase 3: UI/UX Improvements (Safe)**

#### **3.1 Loading Progress**
- **Target**: Add loading progress bar
- **Change**: Show progress during photo loading
- **Risk**: Low - just UI addition
- **Files**: `ContentView.swift`

#### **3.2 Visual Swipe Indicators**
- **Target**: Photo view
- **Change**: Add green/red glow effects during swiping
- **Risk**: Low - just visual effects
- **Files**: `ContentView.swift`

### **Phase 4: Bug Fixes (Critical)**

#### **4.1 Checkpoint Screen Logic**
- **Target**: `loadCurrentPhoto()` function
- **Change**: Fix logic to only show checkpoint when no deletions occurred
- **Risk**: Medium - logic change
- **Files**: `ContentView.swift`

#### **4.2 Range Error Prevention**
- **Target**: `preloadNextPhotos()` function
- **Change**: Add guard statements to prevent range errors
- **Risk**: Low - just safety checks
- **Files**: `ContentView.swift`

### **Phase 5: Code Cleanup (Safe)**

#### **5.1 Remove Unused Variables**
- **Target**: Various functions
- **Change**: Remove unused `mediaType`, `currentAssetId` variables
- **Risk**: Low - just cleanup
- **Files**: `ContentView.swift`

#### **5.2 Simplify Complex Expressions**
- **Target**: `OnboardingView.swift`
- **Change**: Break down complex view builders into smaller functions
- **Risk**: Low - just refactoring
- **Files**: `OnboardingView.swift`

## **Recommended Implementation Order:**

1. **Start with Phase 1.1** (Photo Loading Optimization) - safest
2. **Then Phase 1.2** (Image Request Optimization) - safe
3. **Then Phase 2.1** (Cleanup Functions) - safe
4. **Then Phase 4.2** (Range Error Prevention) - critical bug fix
5. **Then Phase 5.1** (Remove Unused Variables) - safe cleanup

## **What NOT to do:**
- Don't change the core batch logic
- Don't modify the deletion flow
- Don't change the checkpoint screen logic until Phase 4.1
- Don't add new state variables unless absolutely necessary
- Don't change the photo array management

Would you like me to implement these one phase at a time, starting with the safest optimizations first?